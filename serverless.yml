org: techtiz
app: expense
service: ServerlessAppWithLayers
frameworkVersion: "3"
provider:
  name: aws
  stage: dev
  runtime: nodejs18.x
  region: us-east-1
  environment:
    DDB_TABLE_NAME: ${self:custom.expensesTable}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::Join":
            - ":"
            - - "arn:aws:dynamodb"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "table/${self:custom.expensesTable}"
custom:
  expensesTable: expenses
resources:
  Resources:
    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.expensesTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
plugins:
  - serverless-offline
functions:
  getMessages:
    handler: functions/getMessages.getMessages
    events:
      - http:
          path: getMessages
          method: get
  putMessage:
    handler: functions/putMessage.putMessage
    events:
      - http:
          path: putMessage
          method: post
  removeMessage:
    handler: functions/removeMessage.removeMessage
    events:
      - http:
          path: removeMessage
          method: post
  updateMessage:
    handler: functions/updateMessage.updateMessage
    events:
      - http:
          path: updateMessage
          method: post
